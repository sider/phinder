%token IDENTIFIER
%token ELLIPSIS
%token NULL
%token BOOLEAN
%token INTEGER
%token FLOAT
%token STRING

%token ARROW
%token DOUBLE_ARROW

%%

start:
  expression { $$ = $1; }
;

expression:
    term { $$ = $1; }
  | term '|' expression { $$ = new Disjunction($1, $3); }
;

term:
    factor { $$ = $1; }
  | factor '&' term { $$ = new Conjunction($1, $3); }
;

factor:
    element { $$ = $1; }
  | '!' element { $$ = new Not($1); }
;

element:
    atom { $$ = $1; }
  | '(' expression ')' { $$ = $2; }
;

atom:
    wildcard { $$ = $1; }
  | identifier { $$ = $1; }
  | invocation { $$ = $1; }
  | null_literal { $$ = $1; }
  | boolean_literal { $$ = $1; }
  | integer_literal { $$ = $1; }
  | float_literal { $$ = $1; }
  | string_literal { $$ = $1; }
;

wildcard:
    '_' { $$ = new Wildcard(); }
;

identifier:
    IDENTIFIER { $$ = new Identifier($1); }
;

invocation:
    IDENTIFIER '(' arguments ')' { $$ = new Invocation($1, $3); }
;

arguments:
    /* empty */ { $$ = new Arguments(); }
  | non_empty_arguments { $$ = $1; }
;

non_empty_arguments:
    argument { $$ = new Arguments($1); }
  | argument ',' non_empty_arguments { $$ = new Arguments($1, $3); }
;

argument:
    expression { $$ = $1; }
  | varlen_wildcard { $$ = $1; }

varlen_wildcard:
    ELLIPSIS { $$ = new Wildcard(true); }
;

null_literal:
    NULL { $$ = new NullLiteral(); }
;

boolean_literal:
    BOOLEAN { $$ = new BooleanLiteral($1); }
  | ':' 'bool' ':' { $$ = new BooleanLiteral(); }
;

integer_literal:
    INTEGER { $$ = new IntegerLiteral($1); }
  | ':' 'int' ':' { $$ = new IntegerLiteral(); }
;

float_literal:
    FLOAT { $$ = new FloatLiteral($1); }
  | ':' 'float' ':' { $$ = new FloatLiteral(); }
;

string_literal:
    STRING { $$ = new StringLiteral($1); }
  | ':' 'string' ':' { $$ = new StringLiteral(); }
;

// TODO: array (old-style), array (new-style), method_invocation

%%
